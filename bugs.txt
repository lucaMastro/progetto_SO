1. se elimino un file non aggiora list.txt







aaaaaaaaaaaaaaaaaaaa

NON FISSI:


1. invio 2 messaggio full (usr max lunghezza, text max lung, obj max len) e uno easy, server crasha al momento della chiamata dell'operazione 6: 
"free(): invalid next size (fast)
Annullato (core dump creato)"
	----> fixed cambiando l'inizializzazione del server: viene inizializzato con "(message**) malloc(sizeof(message)*max_num...)" invece che "(message**) malloc(sizeof(message*)*max_num...)".
ho provato a rimettere "message*" nel sizeof del malloc, e funziona lo stesso.....
SI VERIFICA IN ENTRAMBI I CASI


2. scenario:

ho registrato a..*20, login, ctrl+c crash
ho registrato a..*19, login, ctrl+c crash
ho registrato a..*18, login, ctrl+c ok
ho registrato a..*5, login,  ctrl+c ok
ho provato a registrare a..*19 di nuovo, errore server-side:

server: malloc.c:2401: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed.
Annullato (core dump creato)




******************************************************************************
****		FIXED BUGS		****
******************************************************************************




-cambio pass. se faccio ctrl+c invece di inserire la pass, il file ha cancellato la pass. 
		----> Fixed con handler ctrl+c

-il messaggio ricevuto successivo a un write back ha dei campi sbagliati.
		----> fixato aumentando di 1 la dimensione della stringa allocata e bzerando un carattere in più. è come se mancasse il delimitatore



-errore di segmentazione se ctrl+c mentre il sistema aspetta input.
****CASI PARTICOLARI****
	-portale di accesso, aspetta l'operazione
	-gestore letture dei messaggi
	-invio messaggio;
		+inserisci l'usrname
		+inserisci l'oggetto
		+inserisci il messaggio
	-gestore eliminazioni, secondo input		
	-cancella account, nei 3 secondi di logout
-gestore eliminazioni: al primo input se do ctrl+c non fa logout
		---> entrambi fixed con handler per il ctrl+c



-su scanf, se premo invio crasha.
****CASI PARTICOLARI****
	-invio messaggio;
                +inserisci l'oggetto
                +inserisci il messaggio
	-gestore letture, operazione 0: inserimento del messaggio
		----> fixed aggiungendo spazio prima di "%m[^\n]":
			scanf(" %m[^\n]", &string);


- in caso di password o usrname troppo lunga, dare possibilità di annullare.
fare refactory, magari con visuale
		----> fixed

- SERVER CRASHA QUANDO VOGLIO RISPONDERE A UN MEX
	--> fixed: era modificata la gestione.
	7bis. errore di segmentazione subito dopo inviato il mess: "premere un tasto per continuare la ricerca" segfault
		----> c'era errore gestione: veniva inviato il file, ma non letto 


- non aggiorna my_new_mex quando il messaggio va nella casella di un messaggio precedentemente cancellato
		----> fixed: nel nuovo modo di inizializzare il server, non veniva mai più cambiato il valore di isnew; risolto reimpostandolo a 1 ogni volta che un 
			messaggio viene eliminato: position rimane invariato mentre gli altri campi vengono liberati (free).

- ctrl+c su cambio pass non esegue logout.
		----> fixed modificando la funzione "close server" aggiungendo il flag per determinare logout o no.


- sui "premi un tasto per continuare la ricerca" se eseguo ctrl+c non fa log out
		----> probabilmente fixato insieme a quello sopra


- ctrl+c su inserisci oggetto o messaggio -> seg fault server-side
		----> mancava il check del ritorno su "read_string(&one_string)" in get_mex


- non fa logout se ctrl+c per seconda volta consecutiva su oggetto/testo. potrebbe essere legato al fatto che il semaforo non viene aumentato se mando il primo ctrl+c:
l'interruzione avviene infatti dopo aver preso il ticket
		----> fixed incrementando il semaforo nella verifica dell'uscita di get_mex



- capita from strano. solito errore di puntatore che cambia durante il parsing del messaggio. 
		----> fixed facendo un uguale tra il campo da parsare e token: "mex -> usr_destination = token;". sono stati tolti i vari malloc dei campi.
			==> questo generava un altro bug, in ritorno dal get_mex, mi dava o "errore di seg" oppure "munmap_chunk() invalid pointer". 
					----> risolto rimettendo i vari malloc. ma non so quanto sia giusto



- scenario:
	io sono a
	ho messaggio da b m0, e da c, m1
	b elimina account
	non mi fa rispondere nemmeno a m1

		----> fixed: in leggi_messaggio messo minimal code = 0 e can_i_wb = 1 all'inizio del while



- errore se inviavo mess con campi troppo lunghi:
"double free or corruption (out)
Annullato (core dump creato)"

se:
 +metto un oggetto di 12 elementi
 +metto un text di 12 elementi
	----> fixed: messaggio veniva dichiarato come malloc sizeof(mex), con mex = message* mex. sizeof(message*) != sizeof(message), rispettivamente 8 e 48.


- se inserivo 1025 messaggi, seg fault lato server: è allocato per 1024.
	----> fixed: aggiunto check su position appena prendo il gettone

- un messaggio con oggetto troppo lungo viene inviato comunque: mi ritorna all'inserimento del destinatario, ma poi lo invia
	----> fixed: inserita interfaccia su ogni campo del messaggio, con possibilità di annullare ecc. 


- manca un check su numeri negativi: non possono essere minori -9999 a causa delle cifre 
	----> unico caso verificato era quello di "elimina_messaggio". aggiustato inviando -1


- se invio un messaggio full (usr max lunghezza, text max lung, obj max len) e poi provo a inviare un altro mess, server crasha subito con: 
"free(): invalid next size (normal)
Annullato (core dump creato)"
succede solo se invio al client la lista degli utenti (send file db)
	----> fixed cambiando la logica di quelle operazioni


---------------------------------------------------------------------------------
scenario:
registro aa..*20
registro a
login a
elimino account a
loggo a*20
chiudo app
free(): invalid next size (fast)
Annullato (core dump creato)

NOTA: stesso scenario con "b" al posto di a*20 funziona bene

	----> testato 2 volte e non succede. veniva allocato spazio per destination_file in fase di registrazione usando "len_usr" non inizializzata

scenario:
registro a
login a
elimino a
registro a*20
login a*20
elimino a*20
free(): invalid next size (fast)
Annullato (core dump creato)

NOTA: stesso scenario con "b" al posto di a*20 funziona bene

	----> testato 2 volte e non succede. veniva allocato spazio per destination_file in fase di registrazione usando "len_usr" non inizializzata


scenario:
registro a
registro a*20
login a
elimino a
login a*20
elimino a*20
file eliminato
munmap_chunk(): invalid pointer
Annullato (core dump creato)

NOTA: non termina, a differenza degli altri
NOTA: stesso scenario con "b" al posto di a*20 funziona bene

	----> testato 2 volte e non succede. veniva allocato spazio per destination_file in fase di registrazione usando "len_usr" non inizializzata

--------------------------------------------------------------------------------
